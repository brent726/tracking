#include "stdafx.h"
#include <cv.h>
#include <highgui.h>
#include "opencv2/highgui/highgui.hpp"
#include <iostream>
#include <stdlib.h>
#include <windows.h>
#include "Roboto.h"
#include "SerialCom.h"

using namespace cv;
using namespace std;
double contourAreaValue(cv::Mat image);

int main()
{
 Roboto Robot;
 Control kontol;
 int enable = 0;
 
 VideoCapture cap(1); // open the video camera no. 0

    if (!cap.isOpened())  // if not success, exit program
    {
        cout << "Cannot open the video cam" << endl;
        return -1;
    }

 namedWindow("OriginalVideo",CV_WINDOW_AUTOSIZE);
 cvNamedWindow("Thresholded Image");


 //namedWindow("Enabler",CV_WINDOW_AUTOSIZE);
 //namedWindow("Cropped Thresholded Image",CV_WINDOW_AUTOSIZE);

 ////HSV CONTROLS
 //namedWindow("Control", CV_WINDOW_AUTOSIZE); //create a window called "Control"
 //int iLowH = 0;
 //int iHighH = 179;
 //int iLowS = 0; 
 //int iHighS = 255;
 //int iLowV = 0;
 //int iHighV = 255;
 ////Create trackbars in "Control" window
 //cvCreateTrackbar("LowH", "Control", &iLowH, 179); //Hue (0 - 179)
 //cvCreateTrackbar("HighH", "Control", &iHighH, 179);
 //cvCreateTrackbar("LowS", "Control", &iLowS, 255); //Saturation (0 - 255)
 //cvCreateTrackbar("HighS", "Control", &iHighS, 255);
 //cvCreateTrackbar("LowV", "Control", &iLowV, 255); //Value (0 - 255)
 //cvCreateTrackbar("HighV", "Control", &iHighV, 255);



 while(1)
 {
	 Mat frame;

        bool bSuccess = cap.read(frame); // read a new frame from video

        if (!bSuccess) //if not success, break loop
        {
             cout << "Cannot read a frame from video stream" << endl;
             break;
        }

		////ENABLER 
		//cv::Rect myROI10(513,23,56,80);
		//cv::Mat croppedImage10 = frame(myROI10);
		//Mat imgHSV;
		//cvtColor(croppedImage10, imgHSV, COLOR_BGR2HSV); //Convert the captured frame from BGR to HSV
		//Mat croppedimgThresholded;
		//inRange(imgHSV, Scalar(iLowH, iLowS, iLowV), Scalar(iHighH, iHighS, iHighV), croppedimgThresholded); //Threshold the image
		////morphological opening (remove small objects from the foreground)
		//erode(croppedimgThresholded, croppedimgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) );
		//dilate( croppedimgThresholded, croppedimgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) ); 
		////morphological closing (fill small holes in the foreground)
		//dilate( croppedimgThresholded, croppedimgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) ); 
		//erode(croppedimgThresholded, croppedimgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)) );

		// imshow("Cropped Thresholded Image", croppedimgThresholded);

		IplImage *img = cvCloneImage(&(IplImage)frame);
 
 //smooth the original image using Gaussian kernel to remove noise
 cvSmooth(img, img, CV_GAUSSIAN,3,3);

 //converting the original image into grayscale
 IplImage* imgGrayScale = cvCreateImage(cvGetSize(img), 8, 1); 
 cvCvtColor(img,imgGrayScale,CV_BGR2GRAY);
 
 cv::Mat image(imgGrayScale);
 //adaptiveThreshold(image,image,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);

		
			


 cv::Rect myROI1(13,33,116,125);
 cv::Rect myROI2(169,25,137,129);
 cv::Rect myROI3(344,14,137,136);
 cv::Rect myROI4(22,201,116,123);
 cv::Rect myROI5(179,195,130,128);
 cv::Rect myROI6(351,191,131,128);
 cv::Rect myROI7(40,368,109,106);
 cv::Rect myROI8(189,362,127,117);
 cv::Rect myROI9(355,359,125,117);
 

 cv::Mat croppedImage1 = image(myROI1);
 cv::Mat croppedImage2 = image(myROI2);
 cv::Mat croppedImage3 = image(myROI3);
 cv::Mat croppedImage4 = image(myROI4);
 cv::Mat croppedImage5 = image(myROI5);
 cv::Mat croppedImage6 = image(myROI6);
 cv::Mat croppedImage7 = image(myROI7);
 cv::Mat croppedImage8 = image(myROI8);
 cv::Mat croppedImage9 = image(myROI9);

 //thresholding the grayscale image to get better results
 //cvThreshold(imgGrayScale,imgGrayScale,100,255,CV_THRESH_BINARY_INV);
 //threshold(croppedImage1,croppedImage1,105,255,CV_THRESH_BINARY_INV);


 adaptiveThreshold(croppedImage1,croppedImage1,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);
 adaptiveThreshold(croppedImage2,croppedImage2,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);
 adaptiveThreshold(croppedImage3,croppedImage3,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);
 adaptiveThreshold(croppedImage4,croppedImage4,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);
 adaptiveThreshold(croppedImage5,croppedImage5,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);
 adaptiveThreshold(croppedImage6,croppedImage6,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);
 adaptiveThreshold(croppedImage7,croppedImage7,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);
 adaptiveThreshold(croppedImage8,croppedImage8,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);
 adaptiveThreshold(croppedImage9,croppedImage9,255,CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY_INV,39,2);

 if(enable == 1)
		{
double cValue[9];
 
 cValue[0] = contourAreaValue(croppedImage1);
 cValue[1] = contourAreaValue(croppedImage2);
 cValue[2] = contourAreaValue(croppedImage3);
 cValue[3] = contourAreaValue(croppedImage4);
 cValue[4] = contourAreaValue(croppedImage5);
 cValue[5] = contourAreaValue(croppedImage6);
 cValue[6] = contourAreaValue(croppedImage7);
 cValue[7] = contourAreaValue(croppedImage8);
 cValue[8] = contourAreaValue(croppedImage9);

			char toRobotArm[9];
			system("CLS");

 for(int x = 0;x < 9;x++)
 {
	 if(cValue[x] > 500 && cValue[x] < 1600)
	 {
		 printf("\nLocation %d = Resistor, value = %lf",x+1,cValue[x]);
		 toRobotArm[x] = 'R';
	 }
	 else if(cValue[x] > 1600 && cValue[x] <2800)
	 {
		 printf("\nLocation %d = Capacitor, value = %lf",x+1,cValue[x]);
		 toRobotArm[x] = 'C';
	 }
	 else if(cValue[x] > 2800)
	 {
		 printf("\nLocation %d = LED, value = %lf",x+1,cValue[x]);
		 toRobotArm[x] = 'L';
	 }
	 else
	 {
		 printf("\nLocation %d = NONE, value = %lf",x+1,cValue[x]);
		 toRobotArm[x] = 'N';
	 }

 }
 
	
	

  cvShowImage("Thresholded Image",imgGrayScale);
  enable = 0;
  //kontol.SuperControl(toRobotArm);
  
		}
 
 imshow("OriginalVideo", image);
 //imshow("Enabler", croppedImage10);


 if (waitKey(30) == 27) //wait for 'esc' key press for 30ms. If 'esc' key is pressed, break loop
       {
            break; 
       }
 if(waitKey(30) == 32)
 {
	 enable =1;
 }
 Sleep(30);
 
 }
 //cleaning up
 cvDestroyAllWindows(); 

 return 0;
}

double contourAreaValue(cv::Mat image)
{
 CvSeq* contours;  //hold the pointer to a contour in the memory block
 CvMemStorage *storage = cvCreateMemStorage(0); //storage area for all contours

 IplImage *top1 = cvCloneImage(&(IplImage)image);
 cvFindContours(top1, storage, &contours, sizeof(CvContour), CV_RETR_LIST, CV_CHAIN_APPROX_SIMPLE, cvPoint(75,60));

 double areaValue = 0;

 while(contours)
 {
     //obtain a sequence of points of contour, pointed by the variable 'contour'
     //result = cvApproxPoly(contours, sizeof(CvContour), storage, CV_POLY_APPROX_DP, cvContourPerimeter(contours)*0.02, 0);
	 if(cvContourArea(contours,CV_WHOLE_SEQ, 0) > 100)
	 {
	 areaValue = areaValue + cvContourArea(contours,CV_WHOLE_SEQ, 0);
	 }
	 contours = contours->h_next; 
 }

  cvReleaseMemStorage(&storage);
  return areaValue;

}