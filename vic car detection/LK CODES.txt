Mat get_fx(Mat &src1, Mat &src2)
{
	Mat fx;
	Mat kernel= Mat::ones(2,2,CV_64FC1);
	//Mat kernel= Mat::ones(2,2,CV_8U);
	kernel.ATD(0,0)=-1.0;
	kernel.ATD(1, 0) = -1.0;


	Mat dst1, dst2;
	filter2D(src1,dst1,-1,kernel);
	filter2D(src2, dst2,-1, kernel );

	fx=dst1+dst2;
	//imshow("fx dst1",dst1);
	//imshow("fx",fx);
	return fx;

}

Mat get_fy(Mat &src1, Mat &src2){
    Mat fy;
    Mat kernel = Mat::ones(2, 2, CV_64FC1);
	//Mat kernel = Mat::ones(2, 2, CV_8U);
    kernel.ATD(0, 0) = -1.0;
    kernel.ATD(0, 1) = -1.0;

    Mat dst1, dst2;
    filter2D(src1, dst1, -1, kernel);
    filter2D(src2, dst2, -1, kernel);
	 
    fy = dst1 + dst2;

	//imshow("fy dst1",dst1);
	//imshow("fy",fy);
    return fy;
}

Mat get_ft(Mat &src1, Mat &src2){
    Mat ft;
    Mat kernel = Mat::ones(2, 2, CV_64FC1);
	//Mat kernel = Mat::ones(2, 2, CV_8U);
    kernel = kernel.mul(-1);

    Mat dst1, dst2;
    filter2D(src1, dst1, -1, kernel);
    kernel = kernel.mul(-1);
    filter2D(src2, dst2, -1, kernel);

    ft = dst1 + dst2;
	//imshow("ft dst1",dst1);
	//imshow("ft dst2",dst2);
	//imshow("ft",ft);
    return ft;
}
bool isInsideImage(int y, int x, Mat &m){
    int width = m.cols;
    int height = m.rows;
    if(x >= 0 && x < width && y >= 0 && y < height) return true;
    else return false;
}

double get_Sum9(Mat &m, int y, int x)
{
	if(x < 0 || x >= m.cols) return 0;
    if(y < 0 || y >= m.rows) return 0;

	double val=0.0;
	int tmp=0;
	if(isInsideImage(y-1,x-1,m))
	{
		++tmp;
		val+=m.ATD(y-1,x-1);
	}
	if(isInsideImage(y - 1, x, m)){
        ++ tmp;
        val += m.ATD(y - 1, x);
    }
	 if(isInsideImage(y - 1, x + 1, m)){
        ++ tmp;
        val += m.ATD(y - 1, x + 1);
    }
    if(isInsideImage(y, x - 1, m)){
        ++ tmp;
        val += m.ATD(y, x - 1);
    }
    if(isInsideImage(y, x, m)){
        ++ tmp;
        val += m.ATD(y, x);
    }
    if(isInsideImage(y, x + 1, m)){
        ++ tmp;
        val += m.ATD(y, x + 1);
    }
    if(isInsideImage(y + 1, x - 1, m)){
        ++ tmp;
        val += m.ATD(y + 1, x - 1);
    }
    if(isInsideImage(y + 1, x, m)){
        ++ tmp;
        val += m.ATD(y + 1, x);
    }
    if(isInsideImage(y + 1, x + 1, m)){
        ++ tmp;
        val += m.ATD(y + 1, x + 1);
    }
    if(tmp == 9) return val;
    else return m.ATD(y, x) * 9;
}
Mat get_Sum9_Mat(Mat &m){
   Mat res = Mat::zeros(m.rows, m.cols, CV_64FC1);
   //Mat res = Mat::zeros(m.rows, m.cols, CV_8U);
    for(int i = 1; i < m.rows - 1; i++){
        for(int j = 1; j < m.cols - 1; j++){
            res.ATD(i, j) = get_Sum9(m, i, j);
        }
    }
    return res;
}
Mat getLucasKanadeOpticalFlow(Mat &img1, Mat &img2, Mat u, Mat v){
	
    Mat fx = get_fx(img1, img2);
    Mat ft = get_ft(img1, img2);
	Mat fy = get_fy(img1, img2);
	 //imshow("ft",ft);
	//imshow("fx",fx);
	//imshow("fx",fx);
	//imshow("fy",fy);
	// Mat ft8u;
	 //ft.convertTo(ft8u,  CV_8U,  255.0/(maxVal  -  minVal),  -minVal);
	 
     Mat fx2 = fx.mul(fx);
	 //imshow("fx2",fx2);
	 //imshow("dilate lines fx",fx);
     Mat fy2 = fy.mul(fy);
	 //imshow("fy2",fy2);
     Mat fxfy = fx.mul(fy);
	//imshow("fxfy",fxfy);
    Mat fxft = fx.mul(ft);
	//imshow("fxft",fxft);

	 
    Mat fyft = fy.mul(ft);
	 //imshow("fyft",fyft);
	 int dilate_size = 2;  
    Mat dilateElement = getStructuringElement(cv::MORPH_RECT,Size(2 * dilate_size + 1, 2* dilate_size + 1),Point(dilate_size, dilate_size) );
	dilate(fyft,fyft,dilateElement); 
   //imshow("dilate lines fyft",fyft);
	 Mat sumfx2 = get_Sum9_Mat(fx2);

	 //imshow("sumfx2",sumfx2);
	// Mat sumfy2 = get_Sum9_Mat(fy2);

	//imshow("sumfx2",sumfx2);
	Mat sumfy2 = get_Sum9_Mat(fy2);

	 //imshow("sumfy2",sumfy2);
	Mat sumfxft = get_Sum9_Mat(fxft);
	//imshow("sumfxft",sumfxft);
    Mat sumfxfy = get_Sum9_Mat(fxfy);
	 //imshow("sumfxfy",sumfxfy);
     Mat sumfyft = get_Sum9_Mat(fyft);

	 //imshow("resultn sum fx and fy", resultfx2fy2);
	Mat tmp = sumfx2.mul(sumfy2) - sumfxfy.mul(sumfxfy);
	// imshow("tmp",tmp);
    u = sumfxfy.mul(sumfyft) - sumfy2.mul(sumfxft);
	v = sumfxft.mul(sumfxfy) - sumfx2.mul(sumfyft);
	//imshow("v",v);
    divide(u, tmp, u);
    divide(v, tmp, v);
	//imshow("u",u);
	
	 return sumfx2;
}
//int to string helper function
string intToString(int number){

	//this function has a number input and string output
	std::stringstream ss;
	ss << number;
	return ss.str();
}

Mat LKDetection(Mat prevFrame, Mat curFrame, Mat u, Mat v)
{
				int i;
				 Mat thresholdImage;
				 Mat frameCurOrig;
				Size img_sz = curFrame.size();
				frameCurOrig=curFrame.clone(); 
				//imshow("curFrame",curFrame);
				//Mat u = Mat::zeros(prevFrame.rows, prevFrame.cols, CV_64FC1);
				//Mat v = Mat::zeros(prevFrame.rows, prevFrame.cols, CV_64FC1);
				//Mat u = Mat::zeros(prevFrame.rows, prevFrame.cols, CV_8U);
				//Mat v = Mat::zeros(prevFrame.rows, prevFrame.cols, CV_8U);

				/***************LK**********************/
				Mat grayLK;
				double  minVal,  maxVal;
				curFrame.convertTo(curFrame, CV_64F, 1.0/255);
				prevFrame.convertTo(prevFrame, CV_64F, 1.0/255);
				GaussianBlur(prevFrame, prevFrame, Size(3, 3), 0, 0, BORDER_DEFAULT);
				GaussianBlur(curFrame, curFrame, Size(3, 3), 0, 0, BORDER_DEFAULT);
				//imshow("curFrame", curFrame);
				Mat LKResultImage=getLucasKanadeOpticalFlow(prevFrame, curFrame, u, v);
				//minMaxLoc(LKResultImage,  &minVal,  &maxVal);  //find  minimum  and  maximum  intensities
				//LKResultImage.convertTo(grayLK,  CV_8U,  255.0/(maxVal  -  minVal),  -minVal);
			
				// imshow("gray LK",grayLK);

				// cv::threshold(grayLK,thresholdImage,18,255,THRESH_BINARY);
				//cv::threshold(grayLK,thresholdImage,10,255,THRESH_BINARY);
				//cv::imshow("LK Threshold Image", thresholdImage);

				
				return LKResultImage;
			

}